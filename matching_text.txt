clean_text.py
______________________________________________

import re

def clean_text_list(text_list):
    cleaned = []
    for text in text_list:
        if not isinstance(text, str) or not text.strip():
            continue
        text = re.sub(r'^[\-\*\â€¢\u2022]\s*', '', text)
        text = re.sub(r'\s+', ' ', text)
        cleaned.append(text.strip())
    return cleaned



extract_json.py
______________________________________________
import json

def extract_sections(json_path):
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"error reading resume json: {e}")
        return []

    sections = []
    keys_to_extract = ['Project', 'Work Experience', 'Achievement']

    if isinstance(data, dict):
        for key in keys_to_extract:
            raw = data.get(key) or []
            for item in raw:
                if isinstance(item, str) and item.strip():
                    sections.append(item.strip())

    print(f"sections in resume {json_path}: {sections}")
    return sections



llm_process.py
______________________________________________

def get_resume_prompt(sections_list, role=None):
    """
    Generate a prompt for LLM to rewrite resume sections.
    
    sections_list: list of str
        Cleaned project/achievement/work-experience entries.
    role: str, optional
        Target role for resume tailoring.
    """
    role_text = f"for the role of {role}" if role else ""
    sections_text = "\n".join(f"- {s}" for s in sections_list)

    prompt = f"""
You are a professional resume editor. Rewrite the following sections {role_text} 
to make them more official, concise, and impactful, using resume-style language.
Keep the meaning intact but improve readability, quantification, and action words.

Sections to improve:
{sections_text}

Return the improved sections as a numbered list, keeping each item separate.
Do not add extra commentary.
"""
    return prompt

def llm_process(cleaned_sections, llm, role=None):
    """
    Full LLM processing: generate prompt, invoke model, return modified sections.
    
    cleaned_sections: list of str
        Cleaned project/achievement/work-experience entries.
    llm: callable
        Your LLM function or model object which accepts a prompt string and returns text.
    role: str, optional
        Target role for resume tailoring.
    """
    if not cleaned_sections or not llm:
        return cleaned_sections

    prompt = get_resume_prompt(cleaned_sections, role=role)
    modified_sections = llm(prompt)
    return modified_sections



setup_llm.py
______________________________________________
from langchain_groq import ChatGroq

def initiate_model(token):
    model_name = "llama-3.1-8b-instant"
    chat_model = ChatGroq(
        model=model_name,
        temperature=0.0,
        max_tokens=4096,
        api_key=token
    )
    print("LLM initialized")
    return chat_model


pipeline.py
______________________________________________
from Improvement__.extract_json import extract_sections
from Improvement__.clean_text import clean_text_list
from Improvement__.llm_process import llm_process
from Improvement__.setup_llm import initiate_model

def get_modified_resume_sections(json_path, role=None, api_token=None):
    """
    Full pipeline: extract -> clean -> LLM -> return modified sections.
    
    json_path: str
        Path to resume JSON file.
    role: str, optional
        Target role for tailoring resume sections.
    api_token: str
        API token for initializing the LLM.
    """
    raw_sections = extract_sections(json_path)
    cleaned_sections = clean_text_list(raw_sections)

    if not api_token:
        raise ValueError("API token is required to initialize the LLM")
    llm = initiate_model(api_token)
    modified_sections = llm_process(cleaned_sections, llm, role=role)

    return modified_sections


imp.py
______________________________________________
from Improvement__.pipeline import get_modified_resume_sections

resume_json = "D:/Projects/Machine and Deep Learning/Resume Project/parsed_data.json"
api_token = "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"
role = "Web Developer"

modified_sections = get_modified_resume_sections(resume_json, role=role, api_token=api_token)
print(modified_sections)



